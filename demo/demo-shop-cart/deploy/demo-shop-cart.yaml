---

apiVersion: v1
kind: ConfigMap
metadata:
  name: gd-demo-shop-v1-outmap
  namespace: gd-demo-shop
data:
  target: djE=
---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  namespace: gd-demo-shop
  name: demo-shop-cart
spec:
  hosts:
    - demo-shop-cart
  http:
    - route:
        - destination:
            host: demo-shop-cart
            subset: v1
---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  namespace: gd-demo-shop
  name: demo-shop-cart-ingress
spec:
  hosts:
    - '*'
  gateways:
    - demo-shop-gateway
  http:
    - match:
        - uri:
            prefix: "/cart/"
      rewrite:
        uri: "/"
      route:
        - destination:
            host: demo-shop-cart
---

apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: demo-shop-cart
  namespace: gd-demo-shop
spec:
  host: demo-shop-cart
  subsets:
    - name: v1
      labels:
        version: v1
---

apiVersion: v1
kind: Service
metadata:
  name: demo-shop-cart
  namespace: gd-demo-shop
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: demo-shop-cart
  type: ClusterIP
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-shop-cart-v1
  namespace: gd-demo-shop
  labels:
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-shop-cart
      version: v1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
#      annotations:
#        sidecar.istio.io/userVolumeMount: '[{"name":"versions", "mountPath":"/etc/versions", "readonly":true}]'
#        sidecar.istio.io/userVolume: '[{"name":"versions", "configMap":{"name":"gd-demo-shop-v1-outmap"}}]'
      labels:
        app: demo-shop-cart
        version: v1
    spec:
      containers:
        - image: 10.0.10.1:5000/gd-demo-shop-cart:latest
          name: shop-cart
          ports:
            - containerPort: 8080
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /actuator/health
              port: 8080
            periodSeconds: 5
            successThreshold: 2
            timeoutSeconds: 3
            initialDelaySeconds: 30
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            initialDelaySeconds: 30
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 800m
              memory: 1Gi
---
